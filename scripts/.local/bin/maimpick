#!/bin/bash

set -euo pipefail

readonly anki_image_field=Picture

take_screenshot() {
  if ! maim --format=png --hidecursor --quality 10 --select --nodecorations=2 "$@" 2>/dev/null; then
    notify "Screenshot canceled."
    return 1
  fi
}

prompt_screenshot_action() {
  rofi -dmenu -l 3 -i -p 'Screenshot:' <<-EOF
		Selection
		Selection → Clipboard
		Selection → Anki
	EOF
}

notify() {
  notify-send "$(basename "$0")" "$*" &
}

if_installed() {
  for x in "$@"; do
    if ! which "$x" >/dev/null 2>&1 && ! dpkg -s "$x" >/dev/null 2>&1; then
      notify "$x must be installed."
      return 1
    fi
  done
}

xclip_png() {
  xclip -selection clipboard -t image/png
}

cleanup_after() {
  { sleep "${1:?Delay is not set.}" && rm -- "${2:?File path is not set.}"; } &
}

ankiconnect_request() {
  curl --silent localhost:8765 -X POST -d "${1:?}"
}

anki_last_added_note() {
  ankiconnect_request '{
		"action": "findNotes",
		"params": {
			"query": "added:1"
		},
		"version": 6
	}' | grep -Po '\[\K[0-9, ]+(?=\])' | sed 's|, |\n|g' | sort -g | tail -1
}

anki_select_note() {
  local request='{
		"action": "guiBrowse",
		"version": 6,
		"params": {
			"query": "nid:<QUERY>"
		}
	}'

  ankiconnect_request "${request/<QUERY>/$1}"
}

anki_store() {
  local -r path=${1:?} name=${2:?}
  local request='{
		"action": "storeMediaFile",
		"version": 6,
		"params": {
			"filename": "<NAME>",
			"path": "<PATH>"
		}
	}'

  request=${request//<NAME>/$name}
  request=${request//<PATH>/$path}

  ankiconnect_request "$request"
}

anki_update_note() {
  local -r note_id=${1:?} field=${2:?} new_content=${3:?}
  local request='{
		"action": "updateNoteFields",
		"version": 6,
		"params": {
			"note": {
				"id": <NOTE_ID>,
				"fields": {
					"<FIELD>": "<NEW_CONTENT>"
				}
			}
		}
	}'

  request=${request//<NOTE_ID>/$note_id}
  request=${request//<FIELD>/$field}
  request=${request//<NEW_CONTENT>/$new_content}

  ankiconnect_request "$request"
}

anki_note_content() {
  local -r note_id=${1:?} field=${2:?}
  local request='{
		"action": "notesInfo",
		"version": 6,
		"params": {
			"notes": [<NOTE_ID>]
		}
	}'

  ankiconnect_request "${request/<NOTE_ID>/$note_id}" |
    grep -Po "\"$field\":\s*{\"value\":\s*\"\K.*?(?=\",)"
}

convert_image() {
  cwebp \
    -blend_alpha '0xffffff' \
    -alpha_q 0 \
    -short \
    -sharp_yuv \
    -af \
    -pass 10 \
    -m 6 \
    -mt \
    -sns 100 \
    -f 100 \
    -o "$2" \
    -resize 0 300 \
    -q 70 \
    -- "$1"
}

handle_anki_screenshot() {
  local -r target_note=$(anki_last_added_note)
  if [[ -z $target_note ]]; then
    notify "No selected note."
    return
  fi

  take_screenshot "$file_path"

  local -r webp_path=${file_path%.*}.webp
  convert_image "$file_path" "$webp_path"

  anki_select_note "0"
  anki_store "$webp_path" "$(basename -- "$webp_path")"

  local -r prev_content=$(anki_note_content "$target_note" "$anki_image_field")
  local -r new_content="<img src=\\\"$(basename -- "$webp_path")\\\">"

  anki_update_note "$target_note" "$anki_image_field" "${prev_content}${new_content}"
  anki_select_note "$target_note" &

  notify "Added. File size: $(("$(stat --format='%s' "$webp_path")" / 1024)) KiB"

  cleanup_after "3s" "$file_path"
  cleanup_after "3s" "$webp_path"
}

main() {
  if_installed maim rofi webp xclip || exit 1

  local -r screenshot_dir="$HOME/Pictures/Screenshots"
  local -r file_path="$screenshot_dir/screenshot-$(date --utc '+%F-%H-%M-%S').png"

  mkdir -p -- "$screenshot_dir"

  local -r screenshot_action=$(prompt_screenshot_action)

  case "$screenshot_action" in
  "Selection")
    take_screenshot "$file_path"
    notify "Selection captured."
    ;;

  "Selection → Clipboard")
    take_screenshot | xclip_png
    notify "Selection copied to clipboard."
    ;;

  "Selection → Anki")
    handle_anki_screenshot
    ;;

  "")
    notify "Screenshot canceled."
    exit 1
    ;;

  *)
    notify "No appropriate action."
    exit 1
    ;;
  esac
}

main
